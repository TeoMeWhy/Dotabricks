with tb_matches as (

  select
        account_id,
        match_id,
        hero_id,
        camps_stacked,
        creeps_stacked,
        deaths,
        denies,
        firstblood_claimed,
        gold,
        gold_per_min,
        gold_spent,
        hero_damage,
        hero_healing,
        coalesce(kill_streaks["1"], 0) as kill_streaks_1,
        coalesce(kill_streaks["2"], 0) as kill_streaks_2,
        coalesce(kill_streaks["3"], 0) as kill_streaks_3,
        coalesce(kill_streaks["4"], 0) as kill_streaks_4,
        coalesce(kill_streaks["5"], 0) as kill_streaks_5,
        kills,
        last_hits,
        level,
        net_worth,
        roshans_killed,
        rune_pickups,
        stuns,
        teamfight_participation,
        tower_damage,
        towers_killed,
        xp_per_min,
        duration,
        case when isRadiant = TRUE then 1 else 0 end as isRadiant,
        win,
        total_gold,
        total_xp,
        kills_per_min,
        kda,
        abandons,
        neutral_kills,
        tower_kills,
        courier_kills,
        lane_kills,
        hero_kills,
        observer_kills,
        sentry_kills,
        roshan_kills,
        necronomicon_kills,
        ancient_kills,
        buyback_count,
        observer_uses,
        sentry_uses,
        lane_efficiency_pct,
        lane,
        lane_role,
        coalesce(purchase_tpscroll, 0) as purchase_tpscroll,
        actions_per_min,
        rank_tier,
        from_unixtime(start_time) as match_date
  
  from bronze_dota.tb_pro_matches_players
  
  where from_unixtime(start_time) >= date_sub('{date}',120)
  and from_unixtime(start_time) < '{date}'

),

tb_basic_stats as (

  select 
          account_id,
          min(datediff('{date}', match_date)) as recencia,
          count( distinct date(match_date) ) as qtde_dias_game,
          count(distinct match_id) as qtde_matches,
          avg(camps_stacked) as avg_camps_stacked,
          avg(creeps_stacked) as avg_creeps_stacked,
          avg(deaths) as avg_deaths,
          avg(denies) as avg_denies,
          avg(firstblood_claimed) as avg_firstblood_claimed,
          avg(gold) as avg_gold,
          avg(gold_per_min) as avg_gold_per_min,
          avg(gold_spent) as avg_gold_spent,
          avg(hero_damage) as avg_hero_damage,
          avg(hero_healing) as avg_hero_healing,
          avg(kill_streaks_1) as avg_kill_streaks_1,
          avg(kill_streaks_2) as avg_kill_streaks_2,
          avg(kill_streaks_3) as avg_kill_streaks_3,
          avg(kill_streaks_4) as avg_kill_streaks_4,
          avg(kill_streaks_5) as avg_kill_streaks_5,
          avg(kills) as avg_kills,
          avg(last_hits) as avg_last_hits,
          avg(level) as avg_level,
          avg(net_worth) as avg_net_worth,
          avg(roshans_killed) as avg_roshans_killed,
          avg(rune_pickups) as avg_rune_pickups,
          avg(stuns) as avg_stuns,
          avg(teamfight_participation) as avg_teamfight_participation,
          avg(tower_damage) as avg_tower_damage,
          avg(towers_killed) as avg_towers_killed,
          avg(xp_per_min) as avg_xp_per_min,
          avg(duration) as avg_duration,
          avg(isRadiant) as avg_isRadiant,
          avg(win) as avg_win,
          avg(total_gold) as avg_total_gold,
          avg(total_xp) as avg_total_xp,
          avg(kills_per_min) as avg_kills_per_min,
          avg(kda) as avg_kda,
          avg(abandons) as avg_abandons,
          avg(neutral_kills) as avg_neutral_kills,
          avg(tower_kills) as avg_tower_kills,
          avg(courier_kills) as avg_courier_kills,
          avg(lane_kills) as avg_lane_kills,
          avg(hero_kills) as avg_hero_kills,
          avg(observer_kills) as avg_observer_kills,
          avg(sentry_kills) as avg_sentry_kills,
          avg(roshan_kills) as avg_roshan_kills,
          avg(necronomicon_kills) as avg_necronomicon_kills,
          avg(ancient_kills) as avg_ancient_kills,
          avg(buyback_count) as avg_buyback_count,
          avg(observer_uses) as avg_observer_uses,
          avg(sentry_uses) as avg_sentry_uses,
          avg(lane_efficiency_pct) as avg_lane_efficiency_pct,
          avg(lane) as avg_lane,
          avg(lane_role) as avg_lane_role,
          avg(purchase_tpscroll) as avg_purchase_tpscroll,
          avg(actions_per_min) as avg_actions_per_min,
          avg(rank_tier) as avg_rank_tier

  from tb_matches

  group by account_id

),

tb_hero_frequency as (

  select account_id,
         hero_id,
         max(match_date) as last_match_date,
         count(*) as qtde_game,
         avg(gold_per_min) as avg_gold_per_min,
         avg(last_hits) as avg_last_hits,
         avg(denies) as avg_denies,
         avg(firstblood_claimed) as avg_firstblood_claimed,
         avg(xp_per_min) as avg_xp_per_min,
         avg(win) as avg_win,
         avg(kda) as avg_kda,
         avg(observer_uses) as avg_observer_uses,
         avg(sentry_uses) as avg_sentry_uses

  from tb_matches

  group by account_id, hero_id
  order by account_id, count(*) desc, max(match_date) desc
),

tb_hero_frequency_rank as (

  select account_id,
         hero_id,
         last_match_date,
         qtde_game,
         avg_gold_per_min,
         avg_last_hits,
         avg_denies,
         avg_firstblood_claimed,
         avg_xp_per_min,
         avg_win,
         avg_kda,
         avg_observer_uses,
         avg_sentry_uses,
         row_number() over (partition by account_id order by qtde_game desc, last_match_date desc) as rank_hero

  from tb_hero_frequency

  order by account_id, rank_hero

),

tb_top_hero_stats as (

  select account_id,
         max(case when rank_hero = 1 then hero_id end) as top01_hero,
         max(case when rank_hero = 2 then hero_id end) as top02_hero,
         max(case when rank_hero = 3 then hero_id end) as top03_hero,
         max(case when rank_hero = 4 then hero_id end) as top04_hero,
         max(case when rank_hero = 5 then hero_id end) as top05_hero,
         max(case when rank_hero = 6 then hero_id end) as top06_hero,
         max(case when rank_hero = 7 then hero_id end) as top07_hero,
         max(case when rank_hero = 8 then hero_id end) as top08_hero,
         max(case when rank_hero = 9 then hero_id end) as top09_hero,
         max(case when rank_hero = 10 then hero_id end) as top10_hero,

         max(case when rank_hero = 1 then avg_gold_per_min end) as top01_gold_per_min,
         max(case when rank_hero = 2 then avg_gold_per_min end) as top02_gold_per_min,
         max(case when rank_hero = 3 then avg_gold_per_min end) as top03_gold_per_min,
         max(case when rank_hero = 4 then avg_gold_per_min end) as top04_gold_per_min,
         max(case when rank_hero = 5 then avg_gold_per_min end) as top05_gold_per_min,
         max(case when rank_hero = 6 then avg_gold_per_min end) as top06_gold_per_min,
         max(case when rank_hero = 7 then avg_gold_per_min end) as top07_gold_per_min,
         max(case when rank_hero = 8 then avg_gold_per_min end) as top08_gold_per_min,
         max(case when rank_hero = 9 then avg_gold_per_min end) as top09_gold_per_min,
         max(case when rank_hero = 10 then avg_gold_per_min end) as top10_gold_per_min,

         max(case when rank_hero = 1 then avg_last_hits end) as top01_last_hits,
         max(case when rank_hero = 2 then avg_last_hits end) as top02_last_hits,
         max(case when rank_hero = 3 then avg_last_hits end) as top03_last_hits,
         max(case when rank_hero = 4 then avg_last_hits end) as top04_last_hits,
         max(case when rank_hero = 5 then avg_last_hits end) as top05_last_hits,
         max(case when rank_hero = 6 then avg_last_hits end) as top06_last_hits,
         max(case when rank_hero = 7 then avg_last_hits end) as top07_last_hits,
         max(case when rank_hero = 8 then avg_last_hits end) as top08_last_hits,
         max(case when rank_hero = 9 then avg_last_hits end) as top09_last_hits,
         max(case when rank_hero = 10 then avg_last_hits end) as top10_last_hits,

         max(case when rank_hero = 1 then avg_denies end) as top01_avg_denies,
         max(case when rank_hero = 2 then avg_denies end) as top02_avg_denies,
         max(case when rank_hero = 3 then avg_denies end) as top03_avg_denies,
         max(case when rank_hero = 4 then avg_denies end) as top04_avg_denies,
         max(case when rank_hero = 5 then avg_denies end) as top05_avg_denies,
         max(case when rank_hero = 6 then avg_denies end) as top06_avg_denies,
         max(case when rank_hero = 7 then avg_denies end) as top07_avg_denies,
         max(case when rank_hero = 8 then avg_denies end) as top08_avg_denies,
         max(case when rank_hero = 9 then avg_denies end) as top09_avg_denies,
         max(case when rank_hero = 10 then avg_denies end) as top10_avg_denies,

         max(case when rank_hero = 1 then avg_firstblood_claimed end) as top01_firstblood_claimed,
         max(case when rank_hero = 2 then avg_firstblood_claimed end) as top02_firstblood_claimed,
         max(case when rank_hero = 3 then avg_firstblood_claimed end) as top03_firstblood_claimed,
         max(case when rank_hero = 4 then avg_firstblood_claimed end) as top04_firstblood_claimed,
         max(case when rank_hero = 5 then avg_firstblood_claimed end) as top05_firstblood_claimed,
         max(case when rank_hero = 6 then avg_firstblood_claimed end) as top06_firstblood_claimed,
         max(case when rank_hero = 7 then avg_firstblood_claimed end) as top07_firstblood_claimed,
         max(case when rank_hero = 8 then avg_firstblood_claimed end) as top08_firstblood_claimed,
         max(case when rank_hero = 9 then avg_firstblood_claimed end) as top09_firstblood_claimed,
         max(case when rank_hero = 10 then avg_firstblood_claimed end) as top10_firstblood_claimed,

         max(case when rank_hero = 1 then avg_xp_per_min end) as top01_xp_per_min,
         max(case when rank_hero = 2 then avg_xp_per_min end) as top02_xp_per_min,
         max(case when rank_hero = 3 then avg_xp_per_min end) as top03_xp_per_min,
         max(case when rank_hero = 4 then avg_xp_per_min end) as top04_xp_per_min,
         max(case when rank_hero = 5 then avg_xp_per_min end) as top05_xp_per_min,
         max(case when rank_hero = 6 then avg_xp_per_min end) as top06_xp_per_min,
         max(case when rank_hero = 7 then avg_xp_per_min end) as top07_xp_per_min,
         max(case when rank_hero = 8 then avg_xp_per_min end) as top08_xp_per_min,
         max(case when rank_hero = 9 then avg_xp_per_min end) as top09_xp_per_min,
         max(case when rank_hero = 10 then avg_xp_per_min end) as top10_xp_per_min,

         max(case when rank_hero = 1 then avg_win end) as top01_win_rate,
         max(case when rank_hero = 2 then avg_win end) as top02_win_rate,
         max(case when rank_hero = 3 then avg_win end) as top03_win_rate,
         max(case when rank_hero = 4 then avg_win end) as top04_win_rate,
         max(case when rank_hero = 5 then avg_win end) as top05_win_rate,
         max(case when rank_hero = 6 then avg_win end) as top06_win_rate,
         max(case when rank_hero = 7 then avg_win end) as top07_win_rate,
         max(case when rank_hero = 8 then avg_win end) as top08_win_rate,
         max(case when rank_hero = 9 then avg_win end) as top09_win_rate,
         max(case when rank_hero = 10 then avg_win end) as top10_win_rate,

         max(case when rank_hero = 1 then avg_kda end) as top01_kda,
         max(case when rank_hero = 2 then avg_kda end) as top02_kda,
         max(case when rank_hero = 3 then avg_kda end) as top03_kda,
         max(case when rank_hero = 4 then avg_kda end) as top04_kda,
         max(case when rank_hero = 5 then avg_kda end) as top05_kda,
         max(case when rank_hero = 6 then avg_kda end) as top06_kda,
         max(case when rank_hero = 7 then avg_kda end) as top07_kda,
         max(case when rank_hero = 8 then avg_kda end) as top08_kda,
         max(case when rank_hero = 9 then avg_kda end) as top09_kda,
         max(case when rank_hero = 10 then avg_kda end) as top10_kda,

         max(case when rank_hero = 1 then avg_observer_uses end) as top01_observer_uses,
         max(case when rank_hero = 2 then avg_observer_uses end) as top02_observer_uses,
         max(case when rank_hero = 3 then avg_observer_uses end) as top03_observer_uses,
         max(case when rank_hero = 4 then avg_observer_uses end) as top04_observer_uses,
         max(case when rank_hero = 5 then avg_observer_uses end) as top05_observer_uses,
         max(case when rank_hero = 6 then avg_observer_uses end) as top06_observer_uses,
         max(case when rank_hero = 7 then avg_observer_uses end) as top07_observer_uses,
         max(case when rank_hero = 8 then avg_observer_uses end) as top08_observer_uses,
         max(case when rank_hero = 9 then avg_observer_uses end) as top09_observer_uses,
         max(case when rank_hero = 10 then avg_observer_uses end) as top10_observer_uses,

         max(case when rank_hero = 1 then avg_sentry_uses end) as top01_sentry_uses,
         max(case when rank_hero = 2 then avg_sentry_uses end) as top02_sentry_uses,
         max(case when rank_hero = 3 then avg_sentry_uses end) as top03_sentry_uses,
         max(case when rank_hero = 4 then avg_sentry_uses end) as top04_sentry_uses,
         max(case when rank_hero = 5 then avg_sentry_uses end) as top05_sentry_uses,
         max(case when rank_hero = 6 then avg_sentry_uses end) as top06_sentry_uses,
         max(case when rank_hero = 7 then avg_sentry_uses end) as top07_sentry_uses,
         max(case when rank_hero = 8 then avg_sentry_uses end) as top08_sentry_uses,
         max(case when rank_hero = 9 then avg_sentry_uses end) as top09_sentry_uses,
         max(case when rank_hero = 10 then avg_sentry_uses end) as top10_sentry_uses

  from tb_hero_frequency_rank

  where rank_hero <= 10

  group by account_id

)

select '{date}' as dt_ref,
       NOW() AS dt_atualizacao, 
       t1.*,
       t2.top01_hero,
       t2.top02_hero,
       t2.top03_hero,
       t2.top04_hero,
       t2.top05_hero,
       t2.top06_hero,
       t2.top07_hero,
       t2.top08_hero,
       t2.top09_hero,
       t2.top10_hero,
       t2.top01_gold_per_min,
       t2.top02_gold_per_min,
       t2.top03_gold_per_min,
       t2.top04_gold_per_min,
       t2.top05_gold_per_min,
       t2.top06_gold_per_min,
       t2.top07_gold_per_min,
       t2.top08_gold_per_min,
       t2.top09_gold_per_min,
       t2.top10_gold_per_min,
       t2.top01_last_hits,
       t2.top02_last_hits,
       t2.top03_last_hits,
       t2.top04_last_hits,
       t2.top05_last_hits,
       t2.top06_last_hits,
       t2.top07_last_hits,
       t2.top08_last_hits,
       t2.top09_last_hits,
       t2.top10_last_hits,
       t2.top01_avg_denies,
       t2.top02_avg_denies,
       t2.top03_avg_denies,
       t2.top04_avg_denies,
       t2.top05_avg_denies,
       t2.top06_avg_denies,
       t2.top07_avg_denies,
       t2.top08_avg_denies,
       t2.top09_avg_denies,
       t2.top10_avg_denies,
       t2.top01_firstblood_claimed,
       t2.top02_firstblood_claimed,
       t2.top03_firstblood_claimed,
       t2.top04_firstblood_claimed,
       t2.top05_firstblood_claimed,
       t2.top06_firstblood_claimed,
       t2.top07_firstblood_claimed,
       t2.top08_firstblood_claimed,
       t2.top09_firstblood_claimed,
       t2.top10_firstblood_claimed,
       t2.top01_xp_per_min,
       t2.top02_xp_per_min,
       t2.top03_xp_per_min,
       t2.top04_xp_per_min,
       t2.top05_xp_per_min,
       t2.top06_xp_per_min,
       t2.top07_xp_per_min,
       t2.top08_xp_per_min,
       t2.top09_xp_per_min,
       t2.top10_xp_per_min,
       t2.top01_win_rate,
       t2.top02_win_rate,
       t2.top03_win_rate,
       t2.top04_win_rate,
       t2.top05_win_rate,
       t2.top06_win_rate,
       t2.top07_win_rate,
       t2.top08_win_rate,
       t2.top09_win_rate,
       t2.top10_win_rate,
       t2.top01_kda,
       t2.top02_kda,
       t2.top03_kda,
       t2.top04_kda,
       t2.top05_kda,
       t2.top06_kda,
       t2.top07_kda,
       t2.top08_kda,
       t2.top09_kda,
       t2.top10_kda,
       t2.top01_observer_uses,
       t2.top02_observer_uses,
       t2.top03_observer_uses,
       t2.top04_observer_uses,
       t2.top05_observer_uses,
       t2.top06_observer_uses,
       t2.top07_observer_uses,
       t2.top08_observer_uses,
       t2.top09_observer_uses,
       t2.top10_observer_uses,
       t2.top01_sentry_uses,
       t2.top02_sentry_uses,
       t2.top03_sentry_uses,
       t2.top04_sentry_uses,
       t2.top05_sentry_uses,
       t2.top06_sentry_uses,
       t2.top07_sentry_uses,
       t2.top08_sentry_uses,
       t2.top09_sentry_uses,
       t2.top10_sentry_uses
       
from tb_basic_stats as t1

left join tb_top_hero_stats as t2
on t1.account_id = t2.account_id